package com.nosoop.ministeam2;

import com.nosoop.steamtrade.inventory.AppContextPair;
import java.awt.EventQueue;
import java.util.Collection;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import bundled.steamtrade.org.json.JSONException;
import com.nosoop.ministeam2.SteamClientMainForm.SteamKitClient;
import com.nosoop.steamtrade.TradeListener;
import com.nosoop.steamtrade.inventory.*;
import com.nosoop.steamtrade.status.TradeEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import uk.co.thomasc.steamkit.types.steamid.SteamID;

/**
 * A window that allows the user to interact in a Steam trade.
 *
 * @author nosoop < nosoop at users.noreply.github.com >
 */
public class SteamClientTradeWindow extends javax.swing.JFrame {
    SteamKitClient client;
    Logger logger;
    ClientTradeListener listener;
    StringBuffer chat;
    String partnerName;

    /**
     * Creates new form SteamTradeWindow
     */
    SteamClientTradeWindow(SteamKitClient client) {
        initComponents();
        this.client = client;
        this.logger = LoggerFactory.getLogger(SteamClientTradeWindow.class.getSimpleName());

        this.setLocationRelativeTo(null);

        logger.debug("Trade listener hooked into window.");

        this.setTitle("Trading...");
        this.setVisible(true);
        logger.debug("Trade window should be visible.");

        chat = new StringBuffer();
    }

    public TradeListener getTradeListener() {
        this.listener = new ClientTradeListener();
        return this.listener;
    }
    
    void updateNames(String username) {
        partnerName = username;
        this.setTitle(String.format("Trading with %s", partnerName));
        otherOfferPanel.setBorder(
                BorderFactory.createTitledBorder(
                String.format("%s's Offer", partnerName)));
    }

    void addMessage(String name, String text) {
        chat.append(String.format("%s: %s%n", name, text));

        tradeChatArea.setText(chat.toString());

        tradeScroller.scrollRectToVisible(
                new java.awt.Rectangle(0, tradeChatArea.getBounds(null).height, 1, 1));
    }

    /**
     * Clears the current inventory table and replaces it with another
     * collection of TradeOurDisplayItem instances.
     *
     * @param items
     */
    void setOwnInventoryTable(Collection<TradePersonalDisplayItem> items) {
        javax.swing.JTable modifiedTable = yourInventoryTable;

        DefaultTableModel table = (DefaultTableModel) modifiedTable.getModel();

        table.setRowCount(0);

        for (TradeDisplayItem item : items) {
            table.addRow(new Object[]{item, item.getCount()});
        }

        modifiedTable.setModel(table);
    }

    /**
     * Updates the client's or the other trader's item display.
     *
     * @param me Boolean value to determine if our offer is being updated.
     * @param items Collection of TradeDisplayItem instances to update the
     * table.
     */
    void updateTradeCount(boolean me, Collection<TradeDisplayItem> items) {
        javax.swing.JTable modifiedTable = me ? yourOfferTable : otherOfferTable;

        DefaultTableModel table = (DefaultTableModel) modifiedTable.getModel();

        for (int i = table.getRowCount() - 1; i >= 0; i--) {
            table.removeRow(i);
        }

        for (TradeDisplayItem item : items) {
            if (item.getCount() > 0) {
                table.addRow(new Object[]{item, item.getCount()});
            }
        }

        modifiedTable.setModel(table);
    }

    /**
     * Loads a list of named AppContextPair objects into the inventory selection
     * dropdown. The dropdown is used to determine which inventory to load.
     *
     * @param appContexts A list of named AppContextPairs to be added to the
     * dropdown.
     */
    void loadInventorySet(List<AppContextPair> appContexts) {
        final javax.swing.DefaultComboBoxModel model =
                (javax.swing.DefaultComboBoxModel) yourInventoriesComboBox.getModel();

        model.removeAllElements();

        for (AppContextPair inventory : appContexts) {
            model.addElement(inventory);
        }

        yourInventoriesComboBox.setEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        yourOfferPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        yourOfferTable = new javax.swing.JTable();
        yourOfferReadyCheckbox = new javax.swing.JCheckBox();
        otherOfferPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        otherOfferTable = new javax.swing.JTable();
        otherOfferReadyCheckbox = new javax.swing.JCheckBox();
        yourInventoryPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        yourInventoryTable = new javax.swing.JTable();
        yourInventoriesComboBox = new javax.swing.JComboBox();
        completeTradeButton = new java.awt.Button();
        cancelTradeButton = new java.awt.Button();
        tradeChatPanel = new javax.swing.JPanel();
        tradeChatInput = new javax.swing.JTextField();
        tradeScroller = new javax.swing.JScrollPane();
        tradeChatArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/nosoop/ministeam2/UIStrings"); // NOI18N
        yourOfferPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("TradeWindow.Labels.YourOffer"))); // NOI18N

        yourOfferTable.setAutoCreateRowSorter(true);
        yourOfferTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        yourOfferTable.setFillsViewportHeight(true);
        yourOfferTable.setShowVerticalLines(false);
        yourOfferTable.getTableHeader().setReorderingAllowed(false);
        yourOfferTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                yourOfferTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                yourOfferTableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(yourOfferTable);
        yourOfferTable.getColumnModel().getColumn(1).setMaxWidth(64);

        yourOfferReadyCheckbox.setText(bundle.getString("TradeWindow.Labels.ReadyToTrade")); // NOI18N
        yourOfferReadyCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yourOfferReadyCheckboxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout yourOfferPanelLayout = new javax.swing.GroupLayout(yourOfferPanel);
        yourOfferPanel.setLayout(yourOfferPanelLayout);
        yourOfferPanelLayout.setHorizontalGroup(
            yourOfferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(yourOfferPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(yourOfferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(yourOfferReadyCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        yourOfferPanelLayout.setVerticalGroup(
            yourOfferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(yourOfferPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yourOfferReadyCheckbox)
                .addContainerGap())
        );

        otherOfferPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("TradeWindow.Labels.PartnerOffer"))); // NOI18N

        otherOfferTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        otherOfferTable.setEnabled(false);
        otherOfferTable.setFillsViewportHeight(true);
        otherOfferTable.setShowVerticalLines(false);
        otherOfferTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(otherOfferTable);
        otherOfferTable.getColumnModel().getColumn(1).setMaxWidth(64);

        otherOfferReadyCheckbox.setText(bundle.getString("TradeWindow.Labels.ReadyToTrade")); // NOI18N
        otherOfferReadyCheckbox.setEnabled(false);

        javax.swing.GroupLayout otherOfferPanelLayout = new javax.swing.GroupLayout(otherOfferPanel);
        otherOfferPanel.setLayout(otherOfferPanelLayout);
        otherOfferPanelLayout.setHorizontalGroup(
            otherOfferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherOfferPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(otherOfferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(otherOfferReadyCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        otherOfferPanelLayout.setVerticalGroup(
            otherOfferPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(otherOfferPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(otherOfferReadyCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        yourInventoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("TradeWindow.Labels.YourInventory"))); // NOI18N

        yourInventoryTable.setAutoCreateRowSorter(true);
        yourInventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        yourInventoryTable.setFillsViewportHeight(true);
        yourInventoryTable.setShowVerticalLines(false);
        yourInventoryTable.getTableHeader().setReorderingAllowed(false);
        yourInventoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                yourInventoryTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                yourInventoryTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(yourInventoryTable);
        yourInventoryTable.getColumnModel().getColumn(0).setHeaderValue("Item");
        yourInventoryTable.getColumnModel().getColumn(1).setMaxWidth(64);
        yourInventoryTable.getColumnModel().getColumn(1).setHeaderValue("Quantity");

        yourInventoriesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "[Scraping trade page for your inventories...]" }));
        yourInventoriesComboBox.setEnabled(false);
        yourInventoriesComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                yourInventoriesComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout yourInventoryPanelLayout = new javax.swing.GroupLayout(yourInventoryPanel);
        yourInventoryPanel.setLayout(yourInventoryPanelLayout);
        yourInventoryPanelLayout.setHorizontalGroup(
            yourInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(yourInventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(yourInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                    .addComponent(yourInventoriesComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        yourInventoryPanelLayout.setVerticalGroup(
            yourInventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(yourInventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yourInventoriesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        completeTradeButton.setEnabled(false);
        completeTradeButton.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        completeTradeButton.setLabel(bundle.getString("TradeWindow.Labels.CompleteTradeButton")); // NOI18N
        completeTradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeTradeButtonActionPerformed(evt);
            }
        });

        cancelTradeButton.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        cancelTradeButton.setLabel(bundle.getString("TradeWindow.Labels.CancelButton")); // NOI18N
        cancelTradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelTradeButtonActionPerformed(evt);
            }
        });

        tradeChatPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("TradeWindow.Labels.TradeChat"))); // NOI18N

        tradeChatInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tradeChatInputKeyPressed(evt);
            }
        });

        tradeChatArea.setEditable(false);
        tradeChatArea.setColumns(20);
        tradeChatArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        tradeChatArea.setLineWrap(true);
        tradeChatArea.setRows(5);
        tradeChatArea.setWrapStyleWord(true);
        tradeScroller.setViewportView(tradeChatArea);

        javax.swing.GroupLayout tradeChatPanelLayout = new javax.swing.GroupLayout(tradeChatPanel);
        tradeChatPanel.setLayout(tradeChatPanelLayout);
        tradeChatPanelLayout.setHorizontalGroup(
            tradeChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tradeChatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tradeChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeChatInput, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tradeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                .addContainerGap())
        );
        tradeChatPanelLayout.setVerticalGroup(
            tradeChatPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tradeChatPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tradeScroller, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tradeChatInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(yourInventoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tradeChatPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(completeTradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelTradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(otherOfferPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(yourOfferPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(yourInventoryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(yourOfferPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(otherOfferPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(completeTradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cancelTradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(tradeChatPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void completeTradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeTradeButtonActionPerformed
        if (listener.trade.getSelf().isReady()
                && listener.trade.getPartner().isReady()) {
            completeTradeButton.setEnabled(false);
            completeTradeButton.setLabel("Processing...");

            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    try {
                        listener.trade.getCmds().acceptTrade();
                    } catch (JSONException e) {
                        logger.error("Unable to accept trade.", e);
                    }
                }
            });
        }
    }//GEN-LAST:event_completeTradeButtonActionPerformed

    private void cancelTradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelTradeButtonActionPerformed
        try {
            listener.trade.getCmds().cancelTrade();
        } catch (JSONException e) {
            logger.error("Unable to cancel trade.", e);
        }
    }//GEN-LAST:event_cancelTradeButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            listener.trade.getCmds().cancelTrade();
        } catch (JSONException e) {
            logger.error("Unable to close window.", e);
        }
    }//GEN-LAST:event_formWindowClosed

    private void yourOfferReadyCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yourOfferReadyCheckboxActionPerformed
        // Runnable that readies up.
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                listener.trade.getCmds().setReady(yourOfferReadyCheckbox.isSelected());

                if (listener.trade.getSelf().isReady()
                        && listener.trade.getPartner().isReady()) {
                    completeTradeButton.setEnabled(true);
                }
            }
        });
    }//GEN-LAST:event_yourOfferReadyCheckboxActionPerformed

    private void yourInventoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yourInventoryTableMouseClicked
        int targetRow = yourInventoryTable.getSelectedRow();

        /**
         * Left-click on your inventory item twice to add it.
         */
        boolean activated = (evt.getClickCount() == 2
                && evt.getButton() == java.awt.event.MouseEvent.BUTTON1);

        if (activated) {
            if (targetRow >= 0) {
                targetRow = yourInventoryTable.convertRowIndexToModel(targetRow);

                TradePersonalDisplayItem item = (TradePersonalDisplayItem) yourInventoryTable.getModel().getValueAt(targetRow, 0);
                listener.tradePutFirstValidItem(item);
            }
        }
    }//GEN-LAST:event_yourInventoryTableMouseClicked

    private void yourOfferTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yourOfferTableMouseClicked
        int targetRow = yourOfferTable.getSelectedRow();

        /**
         * Similarly, left-click on your offered item twice or right-click once
         * to remove it.
         */
        boolean activated = (evt.getClickCount() == 2
                && evt.getButton() == java.awt.event.MouseEvent.BUTTON1);

        if (activated) {
            if (targetRow >= 0) {
                targetRow = yourOfferTable.convertRowIndexToModel(targetRow);

                TradeDisplayItem item = (TradeDisplayItem) yourOfferTable.getModel().getValueAt(targetRow, 0);
                listener.tradeRemoveFirstValidItem(item);
            }
        }
    }//GEN-LAST:event_yourOfferTableMouseClicked

    private void tradeChatInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tradeChatInputKeyPressed
        int key = evt.getKeyCode();

        String inputText = tradeChatInput.getText();

        if (key == java.awt.event.KeyEvent.VK_ENTER && inputText.trim().length() > 0) {
            listener.trade.getCmds().sendMessage(inputText);

            // TODO Add trade chat actions.
            addMessage(client.steamFriends.getPersonaName(), inputText);
            tradeChatInput.setText("");
        }
    }//GEN-LAST:event_tradeChatInputKeyPressed

    private void yourInventoryTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yourInventoryTableMouseReleased
        int targetRow;
        targetRow = yourInventoryTable.rowAtPoint(evt.getPoint());

        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            if (targetRow >= 0 && targetRow < yourInventoryTable.getRowCount()) {
                Object item;

                targetRow = yourInventoryTable.convertRowIndexToModel(targetRow);
                item = yourInventoryTable.getModel().getValueAt(targetRow, 0);

                if (item instanceof TradePersonalDisplayItem) {
                    listener.tradePutFirstValidItem(
                            (TradePersonalDisplayItem) item);
                }
            }
        }
    }//GEN-LAST:event_yourInventoryTableMouseReleased

    private void yourOfferTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_yourOfferTableMouseReleased
        int targetRow;
        targetRow = yourInventoryTable.rowAtPoint(evt.getPoint());

        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            if (targetRow >= 0 && targetRow < yourOfferTable.getRowCount()) {
                Object item;

                targetRow = yourOfferTable.convertRowIndexToModel(targetRow);
                item = yourOfferTable.getModel().getValueAt(targetRow, 0);

                if (item instanceof TradeDisplayItem) {
                    listener.tradeRemoveFirstValidItem(
                            (TradeDisplayItem) item);
                }
            }
        }
    }//GEN-LAST:event_yourOfferTableMouseReleased

    private void yourInventoriesComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_yourInventoriesComboBoxItemStateChanged
        final Object item = yourInventoriesComboBox.getSelectedItem();

        if (item instanceof AppContextPair) {
            // Run inventory loading on the event queue to not stall the UI.
            EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    listener.loadInventory((AppContextPair) item);
                }
            });
        }
    }//GEN-LAST:event_yourInventoriesComboBoxItemStateChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button cancelTradeButton;
    java.awt.Button completeTradeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel otherOfferPanel;
    javax.swing.JCheckBox otherOfferReadyCheckbox;
    private javax.swing.JTable otherOfferTable;
    javax.swing.JTextArea tradeChatArea;
    javax.swing.JTextField tradeChatInput;
    private javax.swing.JPanel tradeChatPanel;
    private javax.swing.JScrollPane tradeScroller;
    private javax.swing.JComboBox yourInventoriesComboBox;
    private javax.swing.JPanel yourInventoryPanel;
    private javax.swing.JTable yourInventoryTable;
    private javax.swing.JPanel yourOfferPanel;
    private javax.swing.JCheckBox yourOfferReadyCheckbox;
    private javax.swing.JTable yourOfferTable;
    // End of variables declaration//GEN-END:variables

    /**
     * A TradeListener that receives user input from a window..
     *
     * @author nosoop < nosoop at users.noreply.github.com >
     */
    public class ClientTradeListener extends TradeListener {
        SteamClientTradeWindow tradeWindow = SteamClientTradeWindow.this;
        Map<String, TradePersonalDisplayItem> myInventoryItems;
        Map<String, TradeDisplayItem> otherOfferedItems, myOfferedItems;
        private final short MAX_ITEMS_IN_TRADE = 256;
        private TradeInternalItem ourTradeSlotsFilled[];
        Logger logger;

        ClientTradeListener() {
            super();

            this.logger = LoggerFactory.getLogger(ClientTradeListener.class);
            logger.debug("Opening up trade window.");

            logger.debug("Created trade window.");

            myOfferedItems = new HashMap<>();
            otherOfferedItems = new HashMap<>();

            myInventoryItems = new HashMap<>();

            ourTradeSlotsFilled = new TradeInternalItem[MAX_ITEMS_IN_TRADE];
            for (int i = 0; i < ourTradeSlotsFilled.length; i++) {
                ourTradeSlotsFilled[i] = null;
            }

            logger.info("Trade session started.");
        }

        final boolean tradePutFirstValidItem(TradePersonalDisplayItem item) {
            List<TradeInternalItem> itemids = item.getItemList();
            for (TradeInternalItem itemid : itemids) {
                if (tradePutItem(itemid)) {

                    String name = item.getDisplayName();
                    if (myOfferedItems.containsKey(name)) {
                        myOfferedItems.get(name).incrementCount(1);
                    } else {
                        TradeDisplayItem it = new TradeDisplayItem(
                                item.getClassid(), name);
                        it.incrementCount(1);
                        myOfferedItems.put(name, it);
                    }
                    tradeWindow.updateTradeCount(true, myOfferedItems.values());

                    return true;
                }
            }
            return false;
        }

        final boolean tradeRemoveFirstValidItem(TradeDisplayItem dispItem) {
            TradePersonalDisplayItem myItem = myInventoryItems.get(dispItem.getDisplayName());
            List<TradeInternalItem> itemids = myItem.getItemList();

            for (TradeInternalItem itemid : itemids) {
                if (tradeRemoveItem(itemid)) {

                    // Update our offer table if there is a successful removal.
                    String name = dispItem.getDisplayName();
                    if (myOfferedItems.containsKey(name)) {
                        myOfferedItems.get(name).incrementCount(-1);
                    } else {
                        TradeDisplayItem it = new TradeDisplayItem(
                                dispItem.getClassid(), name);
                        it.incrementCount(-1);
                        myOfferedItems.put(name, it);
                    }
                    tradeWindow.updateTradeCount(true, myOfferedItems.values());

                    return true;
                }
            }
            return false;
        }

        /**
         * Renders the name of an item for display in the trading window. This
         * name must be unique enough to differentiate the special items from
         * the normal ones. (For example, tell us if it's renamed, if it's
         * gifted, if it has a visible craft number, so on, as similarly named
         * items will be grouped.)
         *
         * @param inventoryItem
         * @return
         */
        String getItemName(TradeInternalAsset inventoryItem) {
            return inventoryItem.getDisplayName();
        }

        final boolean tradePutItem(TradeInternalItem item) {
            // Make sure the item isn't in the trade already.
            if (getSlotByItemID(item) == -1) {
                int slotToFill = getFirstFreeSlot();
                trade.getCmds().addItem(item, slotToFill);
                ourTradeSlotsFilled[slotToFill] = item;

                return true;
            }
            return false;
        }

        final boolean tradeRemoveItem(TradeInternalItem item) {
            int slotToRemove;
            if ((slotToRemove = getSlotByItemID(item)) != -1) {
                trade.getCmds().removeItem(item);
                ourTradeSlotsFilled[slotToRemove] = null;

                return true;
            }
            return false;
        }

        synchronized void loadInventory(AppContextPair appcontext) {
            /**
             * Author's note: We're lazy and never updating the count on this in
             * the duration of the trade. We'll just excuse it as saying it's
             * the total item count for the inventory, and when we add supprot
             * for other inventories, we have something to work with. This sets
             * up our item list that is pushed to the UI.
             */
            TradeInternalInventory inventory;

            // Clear displayed inventory items.
            myInventoryItems.clear();

            // If we don't have a copy of that inventory loaded yet, do that.
            if (!trade.getSelf().getInventories().hasInventory(appcontext)) {
                trade.loadOwnInventory(appcontext);
            }
            inventory = trade.getSelf().getInventories().getInventory(appcontext);

            // Take count of inventory items.
            for (final TradeInternalItem item : inventory.getItemList()) {
                String invName = getItemName(item);

                TradePersonalDisplayItem displayItem;

                if (myInventoryItems.containsKey(invName)) {
                    displayItem = myInventoryItems.remove(invName);
                } else {
                    displayItem = new TradePersonalDisplayItem(item.getClassid(), invName);
                }

                displayItem.incrementCount(1);
                displayItem.addItemToList(item);
                myInventoryItems.put(invName, displayItem);
            }

            tradeWindow.setOwnInventoryTable(myInventoryItems.values());
        }

        /**
         * Finds the first open slot in a trade.
         *
         * @return The position of the first "empty" slot in the trade, -1 if
         * there are no empty slots.
         */
        private int getFirstFreeSlot() {
            for (int i = 0; i < ourTradeSlotsFilled.length; i++) {
                if (ourTradeSlotsFilled[i] == null) {
                    return i;
                }
            }
            return -1;
        }

        /**
         * Finds an item currently in the trade based on the item's id.
         *
         * @param item Item to search for.
         * @return The item's position in the trade if it is in the trade, -1 if
         * not.
         */
        private int getSlotByItemID(TradeInternalItem item) {
            for (int i = 0; i < ourTradeSlotsFilled.length; i++) {
                if (ourTradeSlotsFilled[i] == item) {
                    return i;
                }
            }
            return -1;
        }

        @Override
        public void onError(int eid, String message) {
            logger.debug("Listener received onError event id {}.", eid);
            String estr;
            switch (eid) {
                case TradeStatusCodes.TRADE_CANCELLED:
                    estr = "The trade has been canceled.";
                    break;
                case TradeStatusCodes.STATUS_PARSE_ERROR:
                    estr = "We have encountered an error.";
                    break;
                case TradeStatusCodes.PARTNER_TIMED_OUT:
                    estr = "Other user timed out.";
                    break;
                case TradeStatusCodes.TRADE_FAILED:
                    estr = "Trade failed.";
                    break;
                default:
                    estr = "Unknown error code " + eid + ".";
            }

            if (!message.equals(TradeStatusCodes.EMPTY_MESSAGE)) {
                estr += " (" + message + ")";
            }
            
            logger.debug("Listener received dialog message {}.", estr);

            JOptionPane.showMessageDialog(tradeWindow, estr);
            onTradeClosed();
        }

        @Override
        public void onWelcome() {
            // Update placeholders
            updateNames(client.steamFriends.getFriendPersonaName(
                    new SteamID(trade.getPartnerSteamId())));
        }

        @Override
        public void onAfterInit() {
            /**
             * Author's note: We're lazy and never updating the count on this in
             * the duration of the trade. We'll just excuse it as saying it's
             * the total item count for the inventory, and when we add supprot
             * for other inventories, we have something to work with. This sets
             * up our item list that is pushed to the UI.
             */
            tradeWindow.loadInventorySet(trade.myAppContextData);
        }

        @Override
        public void onUserAddItem(TradeInternalAsset inventoryItem) {
            logger.debug("Getting name.");
            String invName = getItemName(inventoryItem);

            if (otherOfferedItems.containsKey(invName)) {
                otherOfferedItems.get(invName).incrementCount(1);
            } else {
                TradeDisplayItem it = new TradeDisplayItem(
                        inventoryItem.getClassid(), invName);
                it.incrementCount(1);
                otherOfferedItems.put(invName, it);
            }
            tradeWindow.updateTradeCount(false, otherOfferedItems.values());
            logger.info("Item {} added.", invName);
        }

        @Override
        public void onUserRemoveItem(TradeInternalAsset inventoryItem) {
            String invName = getItemName(inventoryItem);

            TradeDisplayItem it = otherOfferedItems.remove(invName);
            it.incrementCount(-1);
            otherOfferedItems.put(invName, it);
            tradeWindow.updateTradeCount(false, otherOfferedItems.values());
        }

        @Override
        public void onMessage(String msg) {
            tradeWindow.addMessage(partnerName, msg);
        }

        @Override
        public void onUserSetReadyState(boolean ready) {
            tradeWindow.otherOfferReadyCheckbox.setSelected(ready);

            if (trade.getSelf().isReady() && trade.getPartner().isReady()) {
                tradeWindow.completeTradeButton.setEnabled(true);
            }
        }

        @Override
        public void onUserAccept() {
        }

        @Override
        public void onNewVersion() {
        }

        @Override
        public void onTradeSuccess() {
            // Trade completed!
            // TODO Show a message dialog telling you again what you received?
            JOptionPane.showMessageDialog(tradeWindow, "Trade completed!");
        }

        @Override
        public void onTimer(int secondsSinceAction, int secondsSinceTrade) {
        }

        @Override
        public void onTradeClosed() {
            tradeWindow.dispose();
            client.tradePoller.endCurrentTradeSession();
        }

        @Override
        public void onUnknownAction(TradeEvent event) {
            // Just output some stuff on unknown actions.
            int action = event.action;

            logger.debug("Unknown action {}", action);
        }
    }

    private class TradeDisplayItem implements Comparable<TradeDisplayItem> {
        int classid;
        String displayName;
        int count;

        TradeDisplayItem(int classid, String displayName) {
            this.classid = classid;
            this.displayName = displayName;

            this.count = 0;
        }

        String getDisplayName() {
            return displayName;
        }

        @Override
        public String toString() {
            return displayName;
        }

        void incrementCount(int factor) {
            count += factor;
        }

        int getCount() {
            return count;
        }

        int getClassid() {
            return classid;
        }

        /**
         * Compares display items by name.
         *
         * @param t TradeDisplayItem to compare.
         * @return
         */
        @Override
        public int compareTo(TradeDisplayItem t) {
            return displayName.compareTo(t.displayName);
        }
    }

    private class TradePersonalDisplayItem extends TradeDisplayItem {
        List<TradeInternalItem> itemAddList;

        TradePersonalDisplayItem(int classid, String displayName) {
            super(classid, displayName);

            itemAddList = new ArrayList<>();
        }

        void addItemToList(TradeInternalItem item) {
            itemAddList.add(item);
        }

        List<TradeInternalItem> getItemList() {
            return itemAddList;
        }
    }

}
